# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L6DkCQrZowqS7GHYJPDjCeB_DcIrC3TJ
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error,accuracy_score,classification_report

# Generating synthetic data
np.random.seed(0)
num_samples = 1000
bus_data = pd.DataFrame({
    'TimeOfDay': np.random.randint(0, 24, num_samples),
    'DayOfWeek': np.random.randint(0, 7, num_samples),
    'HistoricalPassengerCount': np.random.randint(0, 100, num_samples)
})
bus_data['Demand'] = np.random.randint(0, 100, num_samples)  # Synthetic demand data

# Splitting data into train and test sets
X = bus_data[['TimeOfDay', 'DayOfWeek', 'HistoricalPassengerCount']]
y = bus_data['Demand']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Training a Random Forest model
model = RandomForestRegressor(n_estimators=100, random_state=0)
model.fit(X_train, y_train)

# Making predictions on the test set
y_pred = model.predict(X_test)

# Evaluating the model
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

print("class",classification_report(y_test,y_pred))

import pandas as pd

# Sample dataset
data = {
    'BusID': [1, 2, 3, 1, 2, 3, 1, 2, 3, 1],
    'TimeOfDay': [8, 10, 12, 14, 16, 18, 8, 10, 12, 14],
    'DayOfWeek': [0, 1, 2, 3, 4, 5, 6, 0, 1, 2],
    'HistoricalPassengerCount': [50, 60, 70, 40, 55, 65, 45, 58, 68, 38],
    'Demand': [55, 65, 75, 50, 60, 70, 48, 62, 72, 40]
}

# Creating DataFrame
df = pd.DataFrame(data)

# Displaying the DataFrame
print(df)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Sample dataset
data = {
    'Cost': [10, 15, 20, 25, 30],
    'Seats_Availability': [30, 25, 20, 15, 10],
    'Fare': [50, 45, 40, 35, 30]
}

# Creating DataFrame
df = pd.DataFrame(data)

# Splitting the data into features (X) and target variable (y)
X = df[['Cost', 'Seats_Availability']]
y = df['Fare']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Training the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Making predictions on the test set
y_pred = model.predict(X_test)

# Calculating Mean Squared Error
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

# Predicting bus fare for new instances
new_instance = [[18, 22]]  # Example: Cost = 18, Seats_Availability = 22
predicted_fare = model.predict(new_instance)
print("Predicted Fare:", predicted_fare)

import pandas as pd
from sklearn.linear_model import LinearRegression

# Load historical data
data = {
    'BusID': [1, 1, 1, 1, 1, 2, 2, 2, 2, 2],
    'Cost': [10, 12, 15, 18, 20, 10, 12, 15, 18, 20],
    'Seats_Availability': [30, 28, 25, 22, 20, 25, 23, 20, 18, 15],
    'Fare': [50, 48, 45, 42, 40, 48, 46, 43, 40, 38]
}
df = pd.DataFrame(data)

# Function to predict fare for an easily available seat in a given bus
def predict_fare_for_bus(bus_id):
    # Filter data for the specified bus ID
    bus_data = df[df['BusID'] == bus_id]

    # If no data available for the specified bus ID, return None
    if bus_data.empty:
        print("No data available for the specified bus ID.")
        return None

    # Splitting the data into features (X) and target variable (y)
    X = bus_data[['Cost', 'Seats_Availability']]
    y = bus_data['Fare']

    # Train a linear regression model
    model = LinearRegression()
    model.fit(X, y)

    # Predict fare for an easily available seat (e.g., seats_available = 20)
    seats_available = 20
    fare_prediction = model.predict([[bus_data['Cost'].mean(), seats_available]])

    return fare_prediction[0]

# Example usage: Predict fare for Bus ID 1
bus_id = int(input("Enter your bus id:"))
predicted_fare = predict_fare_for_bus(bus_id)
if predicted_fare is not None:
    print("Predicted fare for an easily available seat in Bus ID[", bus_id, "]:", predicted_fare)

pip install pandas scikit-learn mysql-connector-python

import mysql.connector

# Establish connection
connection = mysql.connector.connect(
    host="localhost",
    user="username",
    password="password",
    database="database_name"
)

import pandas as pd
from sklearn.linear_model import LinearRegression

# Sample historical data
data = {
    'BusID': [1, 1, 1, 1, 1, 2, 2, 2, 2, 2],
    'Cost': [10, 12, 15, 18, 20, 10, 12, 15, 18, 20],
    'Seats_Availability': [30, 28, 25, 22, 20, 25, 23, 20, 18, 15],
    'Fare': [50, 48, 45, 42, 40, 48, 46, 43, 40, 38]
}
df = pd.DataFrame(data)

# Function to predict fare for an easily available seat in a given bus
def predict_fare_for_bus(bus_id, seats_available):
    # Filter data for the specified bus ID
    bus_data = df[df['BusID'] == bus_id]

    # If no data available for the specified bus ID, return None
    if bus_data.empty:
        print("No data available for the specified bus ID.")
        return None

    # Splitting the data into features (X) and target variable (y)
    X = bus_data[['Cost', 'Seats_Availability']]
    y = bus_data['Fare']

    # Train a linear regression model
    model = LinearRegression()
    model.fit(X, y)

    # Define cost threshold based on seats available
    if seats_available >= 50:
        cost_threshold = 50
    elif seats_available >= 40:
        cost_threshold = 30
    else:
        cost_threshold = 70

    # Predict fare for an easily available seat
    fare_prediction = model.predict([[cost_threshold, seats_available]])

    return fare_prediction[0]

# User inputs
bus_id = int(input("Enter the Bus ID: "))
seats_available = int(input("Enter the number of available seats: "))

# Predict fare for the specified bus ID and number of available seats
predicted_fare = predict_fare_for_bus(bus_id, seats_available)
if predicted_fare is not None:
    print("Predicted fare for an easily available seat in Bus ID", bus_id, "with", seats_available, "seats available:", predicted_fare)

